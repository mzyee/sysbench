#!/usr/bin/env sysbench
-- Copyright (C) 2006-2017 Alexey Kopytov <akopytov@gmail.com>

-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 2 of the License, or
-- (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

-- ----------------------------------------------------------------------
-- live_item benchmark
-- ----------------------------------------------------------------------

require("live_item_common")

sysbench.cmdline.commands.prepare = {
   function ()
      if (not sysbench.opt.auto_inc) then
         -- Create empty tables on prepare when --auto-inc is off, since IDs
         -- generated on prepare may collide later with values generated by
         -- sysbench.rand.unique()
         sysbench.opt.table_size=0
      end

      cmd_prepare()
   end,
   sysbench.cmdline.PARALLEL_COMMAND
}

function prepare_statements()
   -- We do not use prepared statements here, but oltp_common.sh expects this
   -- function to be defined
end

-- 5 groups, 59 characters
local aid_value_template = "##########-##########-##########"

function get_aid_value()
   return sysbench.rand.string(aid_value_template)
end

function event()
   local table_name = "live_item" .. sysbench.rand.uniform(1, sysbench.opt.tables)
   data='bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'

   if not sysbench.opt.skip_trx then
      con:query("BEGIN")
   end

   if (sysbench.opt.auto_inc) then
      i = 0
   else
      -- Convert a uint32_t value to SQL INT
      i = sysbench.rand.unique() - 2147483648
   end
        
     
   -- con:query(string.format("insert into live_data(`uid`,`aid`, `nick_name`, `desc`,`state`) values ('b3595b69-0160-4225-8768-58506445daa5', 'ac02081f-8f41-4f8e-9d22-7ecbe04e9ba2', '5616341d-1897-4c57-aa95-4557413bdc2f', 'desc', 0 )"))
   con:query(string.format("insert into %s(`uuid`, `aid`,  `type`, `data`, `state` ) values ('eb7f3c89-0873-4d78-8e72-b272a121ce5b', '1%s', 'aaaaaaaaaaaaaaaaaaa', '%s',  0 ), ('eb7f3c89-0873-4d78-8e72-b272a121ce5b', '2%s', 'aaaaaaaaaaaaaaaaaaa', '%s',  0 ), ('eb7f3c89-0873-4d78-8e72-b272a121ce5b', '3%s', 'aaaaaaaaaaaaaaaaaaa', '%s',  0 ), ('eb7f3c89-0873-4d78-8e72-b272a121ce5b', '4%s', 'aaaaaaaaaaaaaaaaaaa', '%s',  0 ), ('eb7f3c89-0873-4d78-8e72-b272a121ce5b', '5%s', 'aaaaaaaaaaaaaaaaaaa', '%s',  0 ), ('eb7f3c89-0873-4d78-8e72-b272a121ce5b', '6%s', 'aaaaaaaaaaaaaaaaaaa', '%s',  0 ), ('eb7f3c89-0873-4d78-8e72-b272a121ce5b', '7%s', 'aaaaaaaaaaaaaaaaaaa', '%s',  0 ), ('eb7f3c89-0873-4d78-8e72-b272a121ce5b', '8%s', 'aaaaaaaaaaaaaaaaaaa', '%s',  0 ), ('eb7f3c89-0873-4d78-8e72-b272a121ce5b', '9%s', 'aaaaaaaaaaaaaaaaaaa', '%s',  0 ), ('eb7f3c89-0873-4d78-8e72-b272a121ce5b', '0%s', 'aaaaaaaaaaaaaaaaaaa', '%s',  0 )", table_name, get_aid_value(), data,  get_aid_value(), data,  get_aid_value(), data,  get_aid_value(), data,  get_aid_value(), data,  get_aid_value(), data,  get_aid_value(), data,  get_aid_value(), data, get_aid_value(),  data, get_aid_value(), data  ))
   if not sysbench.opt.skip_trx then
      con:query("COMMIT")
      --con:query("ROLLBACK")
   end

end
